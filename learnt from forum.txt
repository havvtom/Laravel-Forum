episode 58

- put required on all input fields
- had to change to form submit for editing reply so that the required is not rendered useless
- had to change back to remove form and restore it back 
- page was refreshing after hitting update
- actually no changes done


episode 59


- setting anchor tags on the mentioned user name
- use preg_match
- setting a body attribute
- matching anything after the @ symbol until you get to space(*need to look at regular expressions*)
- had to change v-text in th reply vue compnent so that the anchor tags work

episode 60

- instant search trial with At.js which has not been maintained
- should switch to tribute/zurb
- managed to use tribute/zurb

episode 63

-Laravel can fake data using UploadedFile
-There is also a fake storage for the uploaded images
-This is used for testing uploading an avatar
-UploadedFile::fake()->image('avatar.jpg)
- Add these to the test file(
	use Illuminate\Support\Facades\Storage;
	use Illuminate\Http\UploadedFile;)
- Added an avatar_path column in users table, and also added it to fillable in Users model


episode 64

-learnt how to link the storage files by using the command (php artisan storage:link)
- for the link to work had to get the solution from stackoverflow 
- src="/storage/{{$profileUser->avatar_path}}" or most preferably src="{{asset('/storage/'.$profileUser->avatar_path)}}"
- made an avatar path in the user model


episode 65

- there is an authorize method use in app.js
- it compares the profileId against the authenticated userId
- used computed properties to invoke the function
- learnt local registration of vue components
- getAvatarPathAttribute goes into the database and searches for avatar_path column and the result can be passes on as an argument
- FileReader is used in javascript and can assist in uploading the image instantly
- bit confused with inserting an image-upload component into the AvatarCompnent

episode 66

- Using Redis for trending threads
- Need to change the database.php file in config
- set redis client to predis after installing redis and requiring it through composer
- commented the line prefix in options in the database.php file and everything starts to work

episode 67

- refactoring of trends
- unshowing trending threads if they dont exist

episode 68

- used redis to record visits
- Extracted methods to a trait
- made (test_a_thread_records_each_visit) in the thread test

episode 69

- looking at another design 
- changing the trait and turning it into a class
* I did not do it because I am behind time, I will look at it when I get a chance

episode 70

- keep it simple stupid(KISS)
- we can add another column in the database called visits
- increment it evrytime a thread is visited

episode 71

- used middleware to protect the publishing thread route when email is not confirmed
- had to fix the flash vue component so that it can also show when a message is sent from the server

episode 72

- learnt how to fake email
- this can also be learnt from the laravel documents (type Mail Fake)
- fired an event in the RegisterController just after creating a user
- Open a maitrap account to use for testing
- assertStatus(200) when there is a redirect gives an error. Instead use assertRedirect('redirected_page')
- if using mailtrap its wise to restart the server before trying since it uses data that has been cached
- changed the line in trait RegistersUsers to App\Events\Registered so that the Registered refers to the event that I made
- added another field in the RegisterController (confirmation_token)
- str_rnd no longer works in Laravel 5.7 upwards 
- Used the line (use Illuminate\Support\Str;) and Str::random in the RegisterController
- Not publishing threads, suspects the cache of the channels is the problem
- Removed the button in AvatarComponent

episode 73

- overode the moethod publishThread when creating a user. Set confirmed=true
- almost all the tests are passing now
- Put the try catch to show an error if spamers give an unkown token

episode 76

-replace the end of the slug with a numeral if the thread title is being repeated
-used preg_match for incerementing the last digit

episode 80

-refactoring the reply component
-set method signed in app.js as Vue.prototype.signedIn = window.App.signedIn

episode 83

- used computed properties to show the best reply button
- the way explained in the episode was a bit complicated
- the thread owner can be got from the data and used the id to compare it with the authenticated user
- seems to be working without a glitch

episode 84

- locking a thread so that you cannot reply to it
- created new feature test LockTreadsTest
- added the column to the threads table and also added it to the thread factory

episode 85

- Put a middleware for locking threads
- One has to be signed in and also an administrator

episode 86

- Made name unique on the database column
- Also changed the label to Username on registering users
- Added a validation rule to RegisterController in the users table
- Passed locked property to the thread-view component through props

episode 87

- changed protected $casts in the Thread model so that the locked passed property can be read in Vue
- (this.locked =! this.locked;) can be used to toggle the button between lock and unlock but the exclamation mark should be after =
- if not $casts in the model, then asserting true as 1 and 0 as false is going to fail
- we just need to put !! (double negative)

episode 93

- construct the endpoint manually since we have evrything we need from the thread
- to pass the form fields we register the form as an object in the properties and use v-model binding
- something wrong with my path($thread->channel->slug) 
- changed the getRouteKeyName in channel model to 'slug'
- learnt how to keep and change the values of inputs and text areas after editing and after cancelling

episode 94

-For the relationships to eager load they need to be added to toSearchableArray method

episode 98

https://www.algolia.com/doc/guides/building-search-ui/resources/ui-and-ux-patterns/in-depth/autocomplete/tutorials/how-to-build-rich-horizontal-multi-category-autocomplete-menu/#introduction